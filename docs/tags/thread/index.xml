<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thread on Q</title>
    <link>https://19xx.dev/tags/thread/</link>
    <description>Recent content in thread on Q</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Apr 2014 00:00:00 +0000</lastBuildDate><atom:link href="https://19xx.dev/tags/thread/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ThreadSafety</title>
      <link>https://19xx.dev/posts/0002-ThreadSafety/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0002-ThreadSafety/</guid>
      <description>Ol√°!
A few days ago I ended up into this StackOverflow thread from almost seven years ago, this guy was getting inconsistent results from a multithread code. Well, looked like an excellent excuse to recall some topics and do some new research.
To start with, let&amp;rsquo;s just quickly remember the differences between Multiprogramming, Multiprocessing, Multitasking, and Multithreading.
Multiprogramming #  In a multiprogramming environment more than one program can be loaded to the main memory, but only one will use the CPU to execute instructions, inside this sort of environment programs that are not using CPU are waiting their turn, but off course this is not acceptable, imagine if the same program hold the CPU for 1h?</description>
    </item>
    
  </channel>
</rss>
