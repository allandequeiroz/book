<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>19xx</title>
    <link>https://19xx.dev/</link>
    <description>Recent content on 19xx</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 28 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://19xx.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A parte final</title>
      <link>https://19xx.dev/posts/0007-A-parte-final/</link>
      <pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0007-A-parte-final/</guid>
      <description>A parte final # 11 de dezembro de 2015 Por Tim Urban
Em uma postagem no ano passado, apresentamos visualmente a expectativa de vida humana. Por anos:
Por meses:
E por semanas:
Enquanto trabalhava nesse post, também fiz um gráfico de dias, mas parecia um pouco demais, então deixei de fora.
O gráfico dos dias me surpreendeu tanto quanto o gráfico das semanas. Cada um desses pontos representa apenas uma terça, sexta ou domingo, mas mesmo uma pessoa sortuda que vive até os 90 anos não terá problemas em encaixar todos os dias de sua vida em [uma folha de papel]( https://waitbutwhy.</description>
    </item>
    
    <item>
      <title>Framing and Reframing</title>
      <link>https://19xx.dev/posts/0006-Framing-and-Reframing/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0006-Framing-and-Reframing/</guid>
      <description>Problem Statement # In the wake of unexpected leadership changes at AnotherInc Inc., Ethan, a previously successful vice president, faces significant challenges stemming from the company’s altered dynamics alongside his diminished recognition and estrangement from relevant work. These challenges have been underscored by a shift in power structures and a noticeable change in professional attitudes towards Ethan by the new leaders, Marcus and Daveed. The situation has further escalated due to what he perceives as unfair evaluations, further exacerbating his marginalisation within the organisation.</description>
    </item>
    
    <item>
      <title>Home made Kubernetes cluster</title>
      <link>https://19xx.dev/posts/0005-Home-made-Kubernetes-cluster/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0005-Home-made-Kubernetes-cluster/</guid>
      <description>Homemade Kubernetes Cluster # In my previous post, I wrote about how to set up a scalable Jenkins using Kubernetes at home on top of home devices, in my case, 3 Raspberries, 2 Rock64 and a NUC. Since it wasn&amp;rsquo;t a 5 minutes task I&amp;rsquo;ll describe here the steps I went through to get it working.
Pre-checks # Before installing Kubernetes you better check which Docker version is supported by the Kubernetes version you intend to install, a few days ago I upgraded my Kubernetes cluster from version 12 to 15 so, version 15 is what I&amp;rsquo;ll be used as a reference here.</description>
    </item>
    
    <item>
      <title>Terraform</title>
      <link>https://19xx.dev/posts/0004-Terraform/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0004-Terraform/</guid>
      <description>TLDR; A walk through an EC2 instance setup, dynamically attaching volumes snapshots and configuring Cloudflare DNS entries pointing to the new instance using Terraform and Docker (Ghost, Traefik).
Source code: https://github.com/allandequeiroz/blog/tree/extract_variables
Basic infrastructure configuration using Terraform, Docker (Ghost, Traefik) and Cloudflare. # For a while, I&amp;rsquo;ve hosted this blog, at home, using Docker and Kubernetes across a few Raspberries (I use it as an excuse to do play around). It turns out that I&amp;rsquo;m moving to a new place, so I have a new excuse to play with something else.</description>
    </item>
    
    <item>
      <title>BuildingBlocks</title>
      <link>https://19xx.dev/posts/0003-BuildingBlocks/</link>
      <pubDate>Thu, 02 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0003-BuildingBlocks/</guid>
      <description>Today I would like to write a bit about Java Collections. I believe most of us that already played with Java know about the primary and most used classes in the Java Collections framework, at least ones that ever had an interview are familiar with, they are part of the default pack of questions that interviewers ask to check if you at least read about Java.
But this post does not intend to talk about the different aspects of data structures, or when to use A or B, the idea is to speak briefly about collections in a concurrent context.</description>
    </item>
    
    <item>
      <title>ThreadSafety</title>
      <link>https://19xx.dev/posts/0002-ThreadSafety/</link>
      <pubDate>Mon, 08 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0002-ThreadSafety/</guid>
      <description>A few days ago I ended up into this StackOverflow thread from almost seven years ago, this guy was getting inconsistent results from a multithread code. Well, looked like an excellent excuse to recall some topics and do some new research.
To start with, let&amp;rsquo;s just quickly remember the differences between Multiprogramming, Multiprocessing, Multitasking, and Multithreading.
Multiprogramming # In a multiprogramming environment more than one program can be loaded to the main memory, but only one will use the CPU to execute instructions, inside this sort of environment programs that are not using CPU are waiting their turn, but off course this is not acceptable, imagine if the same program hold the CPU for 1h?</description>
    </item>
    
    <item>
      <title>Websockets</title>
      <link>https://19xx.dev/posts/0001-Websockets/</link>
      <pubDate>Sat, 02 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0001-Websockets/</guid>
      <description>Today post is about a small experiment using Spring 5 to play with WebFux, I&amp;rsquo;ve used it to create a small WebSocket controller to &amp;ldquo;simulate&amp;rdquo; an e-mail inbox. The idea was to send some dummy text to the backend, persist it on MongoDB and from time to time check for new messages and send it to the clients connected to the WebSocket endpoint.
The Cast # Let&amp;rsquo;s see an overview of all actors involved in this small experiment.</description>
    </item>
    
    <item>
      <title>Building Docker images on Travis.ci</title>
      <link>https://19xx.dev/posts/0000-Building-Docker-images-on-Travis.ci/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://19xx.dev/posts/0000-Building-Docker-images-on-Travis.ci/</guid>
      <description>Inspired by the posts from Viktor Adam&amp;rsquo;s blog, when I have some spare time I have been playing with Docker and some open source tools to build this blog.
So far I have my two little devices a Raspberry Pi and a Rock64 hosting this blog, yes, that&amp;rsquo;s right, you&amp;rsquo;re reading this straight from a Ghost blog behind an NGinx hosted at my home, be nice and say hi!
Appart of some details like sensible public data management and external CI usage to generate and publish Docker images that is the subject of this post, this is how my stack looks like right now.</description>
    </item>
    
  </channel>
</rss>
